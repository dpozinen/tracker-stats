import static java.lang.System.getenv

plugins {
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.jetbrains.kotlin.plugin.allopen' version '1.9.21'
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.9.21'
    id 'com.google.cloud.tools.jib' version '3.4.0'
    id 'org.jetbrains.kotlin.jvm' version '1.9.21'
}

group = 'dpozinen'
version = '1.0.1'

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    implementation 'io.github.microutils:kotlin-logging-jvm:3.0.5'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.16.0'
    implementation 'com.influxdb:influxdb-client-kotlin:6.11.0'
    implementation 'org.postgresql:postgresql:42.7.1'


    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.springframework.cloud:spring-cloud-starter-bootstrap:4.0.4'
    testImplementation 'com.playtika.testcontainers:embedded-kafka:3.1.1'
    testImplementation 'com.playtika.testcontainers:embedded-postgresql:3.1.1'
    testImplementation 'org.testcontainers:influxdb:1.19.3'
    testImplementation 'org.influxdb:influxdb-java:2.24'
}

test {
    useJUnitPlatform()
}

compileKotlin {
    kotlinOptions.jvmTarget = '17'
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '17'
}

jib {
    from {
        platforms {
            platform {
                architecture = 'amd64'
                os = 'linux'
            }
            platform {
                architecture = 'arm64'
                os = 'linux'
            }
        }
    }
    to {
        image = "ghcr.io/$group/$rootProject.name"
        auth {
            username = "${getenv("GHCR_ACTOR")}"
            password = "${getenv("GHCR_TOKEN")}"
        }
        tags = ["$version", 'latest']
    }
}
